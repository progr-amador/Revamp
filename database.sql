PRAGMA foreign_keys=ON;


DROP TABLE IF EXISTS USER;
DROP TABLE IF EXISTS RATING;
DROP TABLE IF EXISTS BUYER;
DROP TABLE IF EXISTS SELLER;
DROP TABLE IF EXISTS ADMIN_;
DROP TABLE IF EXISTS SHIPPING;
DROP TABLE IF EXISTS BRAND;
DROP TABLE IF EXISTS CATEGORY;
DROP TABLE IF EXISTS LOCATION_;
DROP TABLE IF EXISTS PRODUCT;
DROP TABLE IF EXISTS CHAT;
DROP TABLE IF EXISTS MESSAGE_;
DROP TABLE IF EXISTS USER_LOCATION;
DROP TABLE IF EXISTS SHIPPING_PRODUCT;
DROP TABLE IF EXISTS CART;


CREATE TABLE USER (
    userID INT,
    username TEXT,
    email TEXT,
    phoneNumber INT,
    creation DATE,
    password_ TEXT,
    Adress TEXT,
    PRIMARY KEY(userID)
);

CREATE TABLE RATING (
    ratedID INT,
    raterID TEXT,
    score INT,
    contentRating TEXT,
    image_ TEXT,
    PRIMARY KEY(ratedID, raterID),
    FOREIGN KEY(ratedID) REFERENCES USER(userID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(raterID) REFERENCES USER(userID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE BUYER (
    buyerID INT,
    PRIMARY KEY(buyerID),
    FOREIGN KEY(buyerID) REFERENCES USER(userID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE SELLER (
    sellerID INT,
    PRIMARY KEY(sellerID),
    FOREIGN KEY(sellerID) REFERENCES USER(userID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE ADMIN_ (
    adminID INT,
    PRIMARY KEY(adminID),
    FOREIGN KEY(adminID) REFERENCES USER(userID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE SHIPPING (
    shippingID INT,
    sellerID INT,    
    buyerID INT,
    weight_ INT,
    PRIMARY KEY(shippingID),
    FOREIGN KEY(sellerID) REFERENCES SELLER(sellerID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(buyerID) REFERENCES BUYER(buyerID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE BRAND (
    brandID INT,
    brandName TEXT,
    PRIMARY KEY(brandID)
);

CREATE TABLE CATEGORY (
    categoryID INT,
    categoryName TEXT,
    PRIMARY KEY(categoryID)
);

CREATE TABLE LOCATION_ (
    locationID INT,
    locationName TEXT,
    PRIMARY KEY(locationID)
);

CREATE TABLE PRODUCT (
    productID INT,
    sellerID INT,
    brandID INT,
    categoryID INT,
    locationID INT,
    PRIMARY KEY(productID),
    FOREIGN KEY(sellerID) REFERENCES SELLER(sellerID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(brandID) REFERENCES BRAND(brandID) ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY(categoryID) REFERENCES CATEGORY(categoryID) ON DELETE SET NULL ON UPDATE CASCADE,
    FOREIGN KEY(locationID) REFERENCES LOCATION_(locationID) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE CHAT (
    chatID INT,
    buyerID INT,    
    sellerID INT,
    productID INT,
    PRIMARY KEY(chatID),
    UNIQUE(buyerID, sellerID, productID),
    FOREIGN KEY(buyerID) REFERENCES BUYER(buyerID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(sellerID) REFERENCES SELLER(sellerID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(productID) REFERENCES PRODUCT(productID) ON DELETE SET NULL ON UPDATE CASCADE
);

CREATE TABLE MESSAGE_ (
    messageID INT,    
    chatID INT,
    date_ DATE,
    size_ INT,
    status_ INT, -- 0(SENT) 1(RECEIVED) 2(READ)
    type_ TEXT, -- IMAGE, TEXT, AUDIO, VIDEO, ETC
    contentMessage TEXT,
    PRIMARY KEY(messageID),
    FOREIGN KEY(chatID) REFERENCES CHAT(chatID) ON DELETE CASCADE ON UPDATE CASCADE,
);

CREATE TABLE USER_LOCATION (
    userID INT,
    locationID INT,
    PRIMARY KEY(userID, locationID),
    FOREIGN KEY(userID) REFERENCES USER(userID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(locationID) REFERENCES LOCATION_(locationID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE SHIPPING_PRODUCT (
    shippingID INT,
    productID INT,
    PRIMARY KEY(shippingID, productID),
    FOREIGN KEY(shippingID) REFERENCES  SHIPPING(shippingID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(productID) REFERENCES PRODUCT(productID) ON DELETE CASCADE ON UPDATE CASCADE
);

CREATE TABLE CART (
    buyerID INT,
    productID INT,
    PRIMARY KEY(buyerID, productID),
    FOREIGN KEY(buyerID) REFERENCES BUYER(buyerID) ON DELETE CASCADE ON UPDATE CASCADE,
    FOREIGN KEY(productID) REFERENCES PRODUCT(productID)ON DELETE CASCADE ON UPDATE CASCADE
);
